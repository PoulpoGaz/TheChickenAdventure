; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_nbObj:
	DB	0
_nbCaisseOk:
	DB	0
_curentLevel:
	DB	0
_maxLvl:
	DB	0
_gameState:
	DW	0
	DB	0
	SEGMENT BSS
_Moves:
	DS	150
_Pushs:
	DS	150
_chicken:
	DS	11
_level:
	DS	1200
;    1	#include "defines.h"
;    2	
;    3	void update();
;    4	void render();
;    5	
;    6	uint8_t nbObj=0;
;    7	uint8_t nbCaisseOk=0;
;    8	uint8_t curentLevel=0;
;    9	uint8_t maxLvl=0;
;   10	enum state gameState = MENU;
;   11	uint24_t Moves[50]; 
;   12	uint24_t Pushs[50];
;   13	chicken_t chicken;
;   14	case_t level[15][20];
	SEGMENT CODE
;   15	
;   16	void main(void) {
_main:
	LD	HL,-1
	CALL	__frameset
;   17	    ti_var_t file;
;   18	    
;   19	    //Init
;   20	    initFade();
	CALL	_initFade
;   21	    
;   22	    //Read
;   23	    srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;   24	
;   25	    ti_CloseAll();
	CALL	_ti_CloseAll
;   26	    file = ti_Open("CHKNSV", "r+");
	LD	BC,L__0
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   27	    if(file) {
	OR	A,A
	JR	Z,L_1
;   28	        ti_Read(&maxLvl, sizeof(uint8_t), sizeof(maxLvl)/sizeof(uint8_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	BC,_maxLvl
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   29	        ti_Read(&Moves, sizeof(uint24_t), sizeof(Moves)/sizeof(uint24_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_Moves
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   30	        ti_Read(&Pushs, sizeof(uint24_t), sizeof(Moves)/sizeof(uint24_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_Pushs
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   31	    }
L_1:
;   32	    //Set curentLevel
;   33	    curentLevel=maxLvl;
;   34	
;   35	    gfx_Begin(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	LD	A,(_maxLvl)
	LD	(_curentLevel),A
	CALL	_gfx_Begin
	POP	BC
;   36	    gfx_SetPalette(sprites_gfx_pal, sizeof_sprites_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,352
	PUSH	BC
	LD	BC,_sprites_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   37	    gfx_SetTextFGColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   38	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   39	
;   40	    //Game loop
;   41	    while(gameState != EXIT) {
	JR	L_2
L_3:
;   42	        setKey();
	CALL	_setKey
;   43	        update();
	CALL	_update
;   44	        render();
	CALL	_render
;   45	        setPreKey();
	CALL	_setPreKey
;   46	    }
L_2:
	LD	BC,3
	LD	HL,(_gameState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
;   47	
;   48	    //Write and quit
;   49	    ti_CloseAll();
	CALL	_ti_CloseAll
;   50	    file = ti_Open("CHKNSV", "w");
	LD	BC,L__4
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   51	    if(file){
	OR	A,A
	JR	Z,L_6
;   52	        ti_Write(&maxLvl, sizeof(uint8_t), sizeof(maxLvl)/sizeof(uint8_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	BC,_maxLvl
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   53	        ti_Write(&Moves, sizeof(uint24_t), sizeof(Moves)/sizeof(uint24_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_Moves
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   54	        ti_Write(&Pushs, sizeof(uint24_t), sizeof(Moves)/sizeof(uint24_t), file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,50
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,_Pushs
	PUSH	BC
	CALL	_ti_Write
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   55	    }
L_6:
;   56	    ti_SetArchiveStatus(true, file);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetArchiveStatus
	POP	BC
	POP	BC
;   57	    gfx_End();
	CALL	_gfx_End
;   58	    prgm_CleanUp();
;   59	    exitFade();
	CALL	_exitFade
;   60	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_exitFade                           IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_ti_SetArchiveStatus                IMPORT  -----   function
;_ti_Write                           IMPORT  -----   function
;_gameState                          STATIC      3   variable
;_setPreKey                          IMPORT  -----   function
;_render                             IMPORT  -----   function
;_update                             IMPORT  -----   function
;_setKey                             IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_sprites_gfx_pal                    IMPORT    352   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_curentLevel                        STATIC      1   variable
;_Pushs                              STATIC    150   variable
;_Moves                              STATIC    150   variable
;_maxLvl                             STATIC      1   variable
;_ti_Read                            IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_initFade                           IMPORT  -----   function
;file                                  IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"r+"
	DB	0
L__1:
	DB	"CHKNSV"
	DB	0
L__4:
	DB	"w"
	DB	0
L__5:
	DB	"CHKNSV"
	DB	0
	SEGMENT CODE
;   61	
;   62	void update() {
_update:
;   63	    if(gameState == MENU) {
	LD	HL,(_gameState)
	CALL	__icmpzero
	JR	NZ,L_12
;   64	        updateMenu();
	CALL	_updateMenu
;   65	    } else if(gameState == GAME) {
	JR	L_13
L_12:
	LD	BC,2
	LD	HL,(_gameState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
;   66	        updateGame();
	CALL	_updateGame
;   67	    } else if(gameState == STATS) {
	JR	L_13
L_10:
	LD	BC,1
	LD	HL,(_gameState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_13
;   68	        updateStats();
	CALL	_updateStats
;   69	    }
;   70	}
L_13:
	RET	


;**************************** _update ***************************
;Name                         Addr/Register   Size   Type
;_updateStats                        IMPORT  -----   function
;_updateGame                         IMPORT  -----   function
;_updateMenu                         IMPORT  -----   function
;_gameState                          STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   71	
;   72	void render() {
_render:
;   73	    if(gameState == MENU) {
	LD	HL,(_gameState)
	CALL	__icmpzero
	JR	NZ,L_18
;   74	        renderMenu();
	CALL	_renderMenu
;   75	    } else if(gameState == GAME) {
	JR	L_19
L_18:
	LD	BC,2
	LD	HL,(_gameState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_16
;   76	        renderGame();
	CALL	_renderGame
;   77	    } else if(gameState == STATS) {
	JR	L_19
L_16:
	LD	BC,1
	LD	HL,(_gameState)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_19
;   78	        renderStats();
	CALL	_renderStats
;   79	    }
L_19:
	RET	


;**************************** _render ***************************
;Name                         Addr/Register   Size   Type
;_renderStats                        IMPORT  -----   function
;_renderGame                         IMPORT  -----   function
;_renderMenu                         IMPORT  -----   function
;_gameState                          STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _updateMenu:ROM
	XREF _updateStats:ROM
	XREF _renderStats:ROM
	XREF _renderMenu:ROM
	XREF _setPreKey:ROM
	XREF _setKey:ROM
	XREF _exitFade:ROM
	XREF _initFade:ROM
	XREF _updateGame:ROM
	XREF _renderGame:ROM
	XREF _sprites_gfx_pal:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _ti_SetArchiveStatus:ROM
	XREF _ti_Read:ROM
	XREF _ti_Write:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _srand:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XDEF _render
	XDEF _update
	XDEF _main
	XDEF _level
	XDEF _chicken
	XDEF _Pushs
	XDEF _Moves
	XDEF _gameState
	XDEF _maxLvl
	XDEF _curentLevel
	XDEF _nbCaisseOk
	XDEF _nbObj
	END
